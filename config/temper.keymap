#include <behaviors.dtsi>
#include "keys_se.h"
#include "betweenies.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// key positions
#define RIGHT_HAND 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define LEFT_HAND 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define THUMBS 30 31 32 33 34 35

#define ___ &trans

// layers
#define DEFAULT 0
#define GAME 1
#define LOWER 2
#define RAISE 3
#define ADJUST 4

// https://github.com/urob/zmk-config#timeless-homerow-mods
#define HM(OTHER_HAND) \
  { \
      compatible = "zmk,behavior-hold-tap"; \
      #binding-cells = <2>; \
      flavor = "balanced"; \
      tapping-term-ms = <280>; \
      quick-tap-ms = <175>; \
      require-prior-idle-ms = <150>; \
      bindings = <&kp>, <&kp>; \
      hold-trigger-key-positions = <OTHER_HAND THUMBS>; \
      hold-trigger-on-release; \
  }

// This isn't perfect when overlapping with homerowmods (like SD and DF) since chording
// several of them will trigger a combo instead. The fix is tracked here
// https://github.com/zmkfirmware/zmk/issues/544, support for tap-only combos.
#define CMB(name, keypos, binding) \
  combo_ ## name { \
      layers = <DEFAULT>; \
      timeout-ms = <50>; \
      bindings = <binding>; \
      key-positions = <keypos>; \
      require-prior-idle-ms = <175>; \
  }

&sk {
    // to avoid sticky shift potentially lasting for two keypresses instead of one
    quick-release;
};

&caps_word {
    continue-list = <SE_UNDS SE_MINS BACKSPACE DELETE>;
};

&lt {
    quick-tap-ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_mo_adjust {
            timeout-ms = <50>;
            bindings = <&mo ADJUST>;
            key-positions = <32 33>;
            require-prior-idle-ms = <175>;
        };

        combo_tog_game {
            layers = <DEFAULT GAME>;
            timeout-ms = <50>;
            bindings = <&tog GAME>;
            key-positions = <33 35>;
            require-prior-idle-ms = <175>;
        };

        CMB(bslash, POS_ED, &kp SE_BSLS);
        CMB(and, POS_DC, &kp SE_AMPR);
        CMB(lpar, POS_SD, &kp SE_LPRN);
        CMB(rpar, POS_DF, &kp SE_RPRN);
        CMB(lbrack, POS_WE, &kp SE_LBRC);
        CMB(rbrack, POS_ER, &kp SE_RBRC);
        CMB(caret, POS_TG, &kp SE_CIRC);
        CMB(excl, POS_RF, &kp SE_EXLM);
        CMB(btick, POS_XC, &kp SE_GRV);
        CMB(ftick, POS_CV, &kp SE_ACUT);
        CMB(plus, POS_FV, &kp SE_PLUS);
        CMB(snabela, POS_SX, &kp SE_AT);
        CMB(tilde, POS_WS, &kp SE_TILD);
        CMB(staket, POS_GB, &kp SE_HASH);

        CMB(dollar, POS_YH, &kp SE_DLR);
        CMB(slash, POS_IK, &kp SE_SLSH);
        CMB(or, POS_KCOM, &kp SE_PIPE);
        CMB(lbrace, POS_JK, &kp SE_LCBR);
        CMB(rbrace, POS_KL, &kp SE_RCBR);
        CMB(lt, POS_UI, &kp SE_LT);
        CMB(gt, POS_IO, &kp SE_GT);
        CMB(ques, POS_UJ, &kp SE_QUES);
        CMB(ouu, POS_OL, &kp SE_ARNG);
        CMB(aee, POS_LDOT, &kp SE_ADIA);
        CMB(oee, POS_COMDOT, &kp SE_ODIA);
        CMB(mult, POS_JM, &kp SE_ASTR);
        CMB(perc, POS_HN, &kp SE_PERC);
        CMB(eql, POS_MCOM, &kp SE_EQL);
    };
    behaviors {
        lhm: left_homerow_mods HM(RIGHT_HAND);
        rhm: right_homerow_mods HM(LEFT_HAND);
        smartshift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };
        qdq: quote_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SE_QUOT>, <&kp SE_DQUO>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
// ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐   ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
        &kp Q         &kp W         &kp E         &kp R         &kp T              &kp Y        &kp U         &kp I         &kp O         &kp P
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &lhm LALT A   &lhm LGUI S   &lhm LSFT D   &lhm LCTL F      &kp G              &kp H     &rhm LCTL J   &rhm LSFT K   &rhm LGUI L  &rhm LALT SE_MINS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Z         &kp X         &kp C         &kp V         &kp B              &kp N        &kp M       &kp COMMA      &kp DOT        &qdq
// └─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┘
                                 &smartshift    &lt LOWER BSPC   &kp ESC           &kp RET    &lt RAISE SPACE  &kp TAB
//                             └─────────────┴─────────────┴─────────────┘   └─────────────┴─────────────┴─────────────┘
            >;
        };

        game_layer {
            bindings = <
// ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐   ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
       &kp ESC        &kp Q         &kp W         &kp E         &kp R              ___           ___           ___           ___           ___
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp LSFT       &kp A         &kp S         &kp D         &kp F              ___           ___           ___           ___           ___
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp LALT       &kp Z         &kp X         &kp C         &kp V              ___           ___           ___           ___           ___
// └─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┘
                                   &kp LCTL     &kp SPACE      &kp TAB             ___           ___           ___
//                             └─────────────┴─────────────┴─────────────┘   └─────────────┴─────────────┴─────────────┘
            >;
        };

        lower_layer {
            bindings = <
// ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐   ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
         ___           ___           ___           ___           ___           &kp SE_PLUS     &kp N7         &kp N8        &kp N9     &kp SE_MINS
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         ___           ___           ___           ___           ___           &kp SE_ASTR     &kp N4         &kp N5        &kp N6     &kp SE_SLSH
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         ___           ___           ___           ___           ___             &kp DOT       &kp N1         &kp N2        &kp N3      &kp COMMA
// └─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┘
                                     ___           ___           ___            &kp BSPC       &kp N0       &kp SPACE
//                             └─────────────┴─────────────┴─────────────┘   └─────────────┴─────────────┴─────────────┘
            >;
        };

        raise_layer {
            bindings = <
// ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐   ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
         ___           ___           ___           ___           ___            &kp HOME      &kp PG_DN     &kp PG_UP      &kp END         ___
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         ___           ___           ___           ___           ___            &kp LEFT      &kp DOWN       &kp UP        &kp RIGHT       ___
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         ___           ___           ___           ___           ___               ___           ___           ___          ___            ___
// └─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┘
                                  &kp INSERT   &kp DELETE    &kp K_CANCEL          ___           ___           ___
//                             └─────────────┴─────────────┴─────────────┘   └─────────────┴─────────────┴─────────────┘
            >;
        };

        adjust_layer {
            bindings = <
// ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐   ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
     &bt BT_SEL 0  &out OUT_TOG  &kp C_VOL_UP  &kp C_NEXT     &kp PSCRN          &kp SLCK       &kp F7        &kp F8        &kp F9       &kp F12
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &bt BT_SEL 1  &bt BT_CLR    &kp K_MUTE    &kp K_PP    &kp PAUSE_BREAK       &kp CAPS       &kp F4        &kp F5        &kp F6       &kp F11
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &bt BT_SEL 2  &ext_power EP_TOG &kp C_VOL_DN &kp C_PREV  &kp K_APP        &kp KP_NUM       &kp F1        &kp F2        &kp F3       &kp F10
// └─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┘
                                      ___          ___           ___               ___          ___            ___
//                             └─────────────┴─────────────┴─────────────┘   └─────────────┴─────────────┴─────────────┘
            >;
        };
    };
};
